generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email String @unique
  password String
  username String
  displayName String?
  phone String?

  avatar String?

  applications Application[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("users")
}

model AuthorizationCode {
  code String @id @default(uuid())
  expiresIn Int 

  application Application @relation(fields: [applicationId], references: [id])
  applicationId String 
  
  createdAt DateTime @default(now()) @map("created_at")
  @@map("authorization_codes")
}


model Application {
  id String @id @default(uuid())
  name String
  redirectUri String @map("redirect_uri")

  clientId String @unique @default(uuid()) @map("client_id")
  clientSecret String @map("client_secret")

  accessTokens AccessToken[]
  authorizationCodes AuthorizationCode[]
  accounts Account[]
  scopes Scopes[]

  user    User    @relation(fields: [userId], references: [id])
  userId  String 


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("applications")
}

model AccessToken {
  id String @id @default(uuid())
  token String @unique @db.VarChar(500)
  userId String 
  expiresIn Int 

  application Application @relation(fields: [applicationId], references: [id])
  applicationId String

  refreshToken RefreshToken? 
  
  createdAt DateTime @default(now()) @map("created_at")
  @@map("access_tokens")
}

model RefreshToken {
  id String @id @default(uuid())
  token String @unique @db.VarChar(500)
  expiresIn Int

  accessToken AccessToken @relation(fields: [accessTokenId], references: [id])
  accessTokenId String @unique  

  createdAt DateTime @default(now()) @map("created_at")
  @@map("refresh_tokens")
}

model Account {
    id String @id @default(uuid())
    userId String
    
    application Application @relation(fields: [applicationId], references: [id])
    applicationId String

    accessToken String @map("access_token") @unique @db.VarChar(500)
    refreshToken String @map("refresh_token") @unique @db.VarChar(500)
    @@map("accounts")
}

model Scopes {
  id String @id @default(uuid())
  name String

  application Application @relation(fields: [applicationId], references: [id])
  applicationId String
  @@map("scopes")
}